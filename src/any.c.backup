#include "analysis.h"
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

#include <pcap.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <string.h>
#include <pthread.h>

// pthread_mutex_t variables for each variable which is incremented
pthread_mutex_t xmas_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t arp_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t blacklist_mutex = PTHREAD_MUTEX_INITIALIZER;

// Variable to count number of each violation type in part 2. Static so values remain through multiple calls to analysis.c
static int xmas_count = 0;
static int arp_count = 0;
static int blacklistcount = 0;

void analyse(struct pcap_pkthdr *header,
             const unsigned char *packet,
             int verbose) {

  struct ether_header *eth_header = (struct ether_header *) packet;
//  u_short ethernet_type = ntohs(eth_header->ether_type);
  // TODO your part 2 code here

  if (ntohs(eth_header->ether_type) == ETHERTYPE_ARP) { // ARP
//    dump(packet + ETH_HLEN);
    struct ether_arp *arp_header = (struct ether_arp *) (packet + ETH_HLEN);
//    printf("arp found\n");
        unsigned short arpop = ntohs(arp_header->arp_op);
//    printf("arp op: %d\n",arpop);
    if(ntohs(arp_header->ea_hdr.ar_op) == ARPOP_REPLY) { // if the arg is a reply
      pthread_mutex_lock(&arp_mutex);
      arp_count++;
      pthread_mutex_unlock(&arp_mutex);
      printf("Arp count: %d\n\n", arp_count);
    }
  }
  if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) { // IP

    struct ip *ip_header = (struct ip *) (packet + ETH_HLEN);
//    printf("\n Type of service: %hu", ip_header->ip_tos);
//    printf("\n ID: %d", ip_header->ip_id);
//    printf("\n Protocol %hu", ip_header->ip_p);

    char temp_str_ip[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &(ip_header->ip_src.s_addr), temp_str_ip, INET_ADDRSTRLEN);
//    printf("\n Source Address %s", temp_str_ip);

    inet_ntop(AF_INET, &(ip_header->ip_dst.s_addr), temp_str_ip, INET_ADDRSTRLEN);
//    printf("\n Destination Address %s\n", temp_str_ip);
//    if (ip_header->ip_p == 6) {
      struct tcphdr *tcp_header = (struct tcphdr *) (packet + ETH_HLEN + (ip_header->ip_hl*4));
//      printf("tcp_head source: %u\n", ntohs(tcp_header->source));
      //    printf("source tcp: %u\n",ntohs(tcp_header->source));
//       if (ntohs(tcp_header->source) == 80 || ntohs(tcp_header->dest == 80)) { // if source port or destination port are 80 (http)
// //      	printf("tcp_head 80 80\n");
//       	char *http_header = (char *) ((packet + ETH_HLEN + ip_header->ip_hl*4 + tcp_header->doff*4));
//         char *http_cert = strtok(http_header, "/r/n");
//         fflush(stdout);
//         while (http_cert != NULL) {
// //          printf("http_cert not null\n");
//           if (strstr(http_cert, "Host:")) {
//             printf("Cert:%s\n", http_cert);
//             blacklistcount++;
// //            printf("blacklistcount: %d\n", blacklistcount);
//           }
//           http_cert = strtok(NULL, "/r/n");
//         }
//       }
      if(ntohs(tcp_header->source) == 80 || ntohs(tcp_header->dest) == 80) {
        printf("2 80s \n");
        char *data_after_packets = (char *) (packet + ETH_HLEN + ip_header->ip_hl*4 + tcp_header->doff*4);
        char *line = strtok(data_after_packets, "/r/n");
        fflush(stdout);
        while (line != NULL) {
          if (strstr(line, "Host: www.bbc.co.uk")) {
            printf("FOUND:%s\n", line);
            pthread_mutex_lock(&blacklist_mutex);
            blacklistcount++;
            pthread_mutex_unlock(&blacklist_mutex);
            printf("blacklistcount: %d\n", blacklistcount);

          }
          line = strtok(NULL, "/r/n");
        }
      }
      unsigned int urgy = tcp_header->urg;
      unsigned int finy = tcp_header->fin;
      unsigned int pshy = tcp_header->psh;
      if (urgy && finy && pshy) { // if all flagged
        pthread_mutex_lock(&xmas_mutex);
      	xmas_count++;
        pthread_mutex_unlock(&xmas_mutex);
//      	printf("xmas_count %d\n", xmas_count);
      }
    }
    else {
//      printf("Not tcp\n");
    }
//  }

  signal(SIGINT, signaller);

}
